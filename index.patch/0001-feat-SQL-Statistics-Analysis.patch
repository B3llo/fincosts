From f2b88c59f085c9b7eafcec19e7f3ce4270a1c9f8 Mon Sep 17 00:00:00 2001
From: "Gabriel F. Bello" <gfbello.x@gmail.com>
Date: Fri, 25 Aug 2023 22:08:17 -0300
Subject: [PATCH] feat: SQL Statistics Analysis

---
 package.json                                 |  1 +
 src/index.ts                                 |  6 +--
 src/utils/azure/analysis/analyzeBlobUsage.ts | 42 ++++++++++++++++++
 src/utils/azure/analysis/getSQLStats.ts      | 45 ++++++++++++++++++++
 src/utils/azure/analysis/index.ts            |  3 ++
 5 files changed, 94 insertions(+), 3 deletions(-)
 create mode 100644 src/utils/azure/analysis/analyzeBlobUsage.ts
 create mode 100644 src/utils/azure/analysis/getSQLStats.ts
 create mode 100644 src/utils/azure/analysis/index.ts

diff --git a/package.json b/package.json
index 2656fb0..5b8d6b3 100644
--- a/package.json
+++ b/package.json
@@ -22,6 +22,7 @@
     "@azure/arm-monitor": "^7.0.0",
     "@azure/identity": "^3.3.0",
     "@azure/monitor-query": "^1.1.1",
+    "@azure/storage-blob": "^12.15.0",
     "@google-cloud/compute": "^3.9.1",
     "@google-cloud/monitoring": "^3.0.4",
     "@google-cloud/storage": "^6.11.0",
diff --git a/src/index.ts b/src/index.ts
index cd2d914..14fb36c 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -1,7 +1,7 @@
 import { AvailableProviders } from "./enums/availableProviders.enum";
 import { fetchUnattachedEBSVolumes, fetchLowCPUInstances, fetchUnattachedEIPs, fetchUnusedNatGateways, fetchUnattachedENIs, fetchOldSnapshots } from "./utils/aws/analysis";
 import { getCloudSQLStats, analyzeBucketUsage, fetchLowCPUInstancesGCP } from "./utils/gcp/analysis";
-// import { fetchLowCPUInstancesAzure, analyzeBlobUsage, getAzureSQLStats } from "./utils/azure/analysis";
+import { fetchLowCPUInstancesAzure, analyzeBlobUsage, getAzureSQLStats } from "./utils/azure/analysis";
 import { listAvailableProfiles, readFincostsConfig, setCredentials, setRegion, getDefaultRegion } from "./utils/unifiedCredentials";
 import inquirer from "inquirer";
 import chalk from "chalk";
@@ -118,8 +118,8 @@ async function generateReport() {
       break;
     case "azure":
       // await fetchLowCPUInstancesAzure();
-      // await analyzeBlobUsage();
-      // await getAzureSQLStats();
+      await analyzeBlobUsage();
+      await getAzureSQLStats();
       break;
   }
 
diff --git a/src/utils/azure/analysis/analyzeBlobUsage.ts b/src/utils/azure/analysis/analyzeBlobUsage.ts
new file mode 100644
index 0000000..8a9e8d2
--- /dev/null
+++ b/src/utils/azure/analysis/analyzeBlobUsage.ts
@@ -0,0 +1,42 @@
+import { BlobServiceClient } from "@azure/storage-blob";
+import { DefaultAzureCredential } from "@azure/identity";
+import ora from "ora";
+
+interface BlobUsage {
+  containerName: string;
+  totalSizeInBytes: number;
+}
+
+export const analyzeBlobUsage = async (): Promise<BlobUsage[]> => {
+  const spinner = ora("Analyzing Blob usage").start();
+
+  try {
+    const credential = new DefaultAzureCredential();
+    const blobServiceClient = new BlobServiceClient("<your-blob-service-endpoint>", credential);
+
+    let blobUsage: BlobUsage[] = [];
+
+    for await (const container of blobServiceClient.listContainers()) {
+      const containerClient = blobServiceClient.getContainerClient(container.name);
+      let totalSizeInBytes = 0;
+
+      for await (const blob of containerClient.listBlobsFlat()) {
+        const blobClient = containerClient.getBlobClient(blob.name);
+        const properties = await blobClient.getProperties();
+        totalSizeInBytes += properties.contentLength!;
+      }
+
+      blobUsage.push({
+        containerName: container.name,
+        totalSizeInBytes,
+      });
+    }
+
+    spinner.succeed("Blob usage analysis completed");
+    return blobUsage;
+  } catch (error) {
+    spinner.fail("Failed to analyze Blob usage");
+    console.error(error);
+    throw error;
+  }
+};
diff --git a/src/utils/azure/analysis/getSQLStats.ts b/src/utils/azure/analysis/getSQLStats.ts
new file mode 100644
index 0000000..3531c11
--- /dev/null
+++ b/src/utils/azure/analysis/getSQLStats.ts
@@ -0,0 +1,45 @@
+import { SqlManagementClient } from "@azure/arm-sql";
+import { DefaultAzureCredential } from "@azure/identity";
+import ora from "ora";
+
+interface AzureSQLStats {
+  serverName: string;
+  databaseName: string;
+  dtuUsage: number;
+}
+
+export const getAzureSQLStats = async (): Promise<AzureSQLStats[]> => {
+  const spinner = ora("Fetching Azure SQL stats").start();
+
+  try {
+    const subscriptionId = "<your-subscription-id>";
+    const resourceGroupName = "<your-resource-group-name>";
+    const credential = new DefaultAzureCredential();
+    const sqlManagementClient = new SqlManagementClient(credential, subscriptionId);
+
+    let sqlStats: AzureSQLStats[] = [];
+
+    const servers = await sqlManagementClient.servers.listByResourceGroup(resourceGroupName);
+
+    for (const server of servers) {
+      const databases = await sqlManagementClient.databases.listByServer(resourceGroupName, server.name!);
+
+      for (const database of databases) {
+        const dtuUsage = await sqlManagementClient.databases.get(resourceGroupName, server.name!, database.name!);
+
+        sqlStats.push({
+          serverName: server.name!,
+          databaseName: database.name!,
+          dtuUsage: dtuUsage.databaseUsage!.currentValue!,
+        });
+      }
+    }
+
+    spinner.succeed("Azure SQL stats fetched");
+    return sqlStats;
+  } catch (error) {
+    spinner.fail("Failed to fetch Azure SQL stats");
+    console.error(error);
+    throw error;
+  }
+};
diff --git a/src/utils/azure/analysis/index.ts b/src/utils/azure/analysis/index.ts
new file mode 100644
index 0000000..9247762
--- /dev/null
+++ b/src/utils/azure/analysis/index.ts
@@ -0,0 +1,3 @@
+export * from "./analyzeBlobUsage";
+export * from "./lowCPUInstances";
+export * from "./getSQLStats";
-- 
2.25.1

